name: CI/CD Pipeline

on:
  push:
    branches: [dev]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (Backend)
        run: |
          cd ./server
          npm install

      - name: Run ESLint (Backend)
        run: |
          cd ./server
          npm run lint

      - name: Run tests (Backend)
        run: |
          cd ./server
          npm test

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/augsburg-picks-backend:latest  ./server
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/augsburg-picks-backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/augsburg-picks-frontend:latest  ./client
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/augsburg-picks-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml

      - name: set KUBECONFIG environment variable
        run: echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Create mongo-secret.yaml
        run: |
          cat <<EOF > mongo-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongo-secret
            namespace: talha-rasool-dev
          type: Opaque
          stringData:
            MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_USER }}
            MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_PASS }}
            MONGODB_URI: mongodb://${{ secrets.MONGO_USER }}:${{ secrets.MONGO_PASS }}@mongodb:27017/ecommerce?authSource=admin
          EOF

      - name: Validate secrets
        run: |
          test -n "${{ secrets.MONGO_USER }}" || (echo "Missing MONGO_USER" && exit 1)
          test -n "${{ secrets.MONGO_PASS }}" || (echo "Missing MONGO_PASS" && exit 1)
          test -n "${{ secrets.MONGO_DB }}" || (echo "Missing MONGO_DB" && exit 1)

      - name: Apply all Kubernetes manifests
        run: |
          kubectl config set-context --current 
          for file in k8s/*.yml; do
            echo "Applying $file"
            kubectl apply -f "$file"
          done
